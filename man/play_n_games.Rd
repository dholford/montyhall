% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/HolfordMeetsMonty.R
\name{play_n_games}
\alias{play_n_games}
\title{Scale to Analyze}
\usage{
play_n_games(n = 100)
}
\arguments{
\item{`play_n_games()`}{requires one argument to name the number of games to be played}
}
\value{
This function returns a data frame with two vectors one vector with the strategy
and one with the outcome for all games played.
}
\description{
\code{play_n_games()} builds out the final dimension of the package, allowing for the running
of n games to build a robust data frame to analyze the \% of wins when staying
and the \% of wins when switching.
}
\details{
\code{play_n_games()} loads the necessary library and creates a collector vector
for the results of each simulation of the game. From here, the function runs
the play game function to simulate the outcome of a game for both
staying and switching and store it in a data frame. Finally, the function
binds the data frames from each loops and returns a table with the percentage of
wins and loses for each strategy.

\code{play_n_games()} runs as follows:

Loads dplyr to allow for building a table later on
Creates a collector vector to store the data frame for each loop
And names a loop count

Sets up a for() loop to run n simulations of the game using \code{play_game()} and store the game outcome
by loop count in a data frame.

Ultimately, this data frame is converted into a table to show the percentage of wins
for stay and switch strategies.
}
\examples{

play_n_games(n = 100)
play_n_games(n = 50)

}
