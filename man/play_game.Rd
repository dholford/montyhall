% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/HolfordMeetsMonty.R
\name{play_game}
\alias{play_game}
\title{Play A Game and Store Results by Stay and Switch}
\usage{
play_game()
}
\arguments{
\item{This}{function requires no arguments since each function within play_game
generates the arguments needed to run through the scenarios.}
}
\value{
This returns a data frame with two character vectors both strategies and
the outcome for each strategy.
}
\description{
\code{play_game()} packages the entire game scenario with outcomes for both the
"stay" and "switch" options. By generating a data frame with the outcome
for both "stay" and "switch" we can see which strategy would result in a
"Win" and which strategy would result in a "Lose."
}
\details{
Since the main question behind this game is whether the better strategy is stay
with your initial pick or switch once a goat door has been revealed, packaging a single
game playing out both the "stay" and "switch" scenarios allows for deeper analysis
of which strategy is ultimately the better strategy. The \code{play_game()} function
contains all functions discussed so far and includes a section to identify
if staying would result in a win or a loss and if switching would result in a
win or loss. The final section packages these results in a data frame and returns
the outcomes for both strategies.

play_game() runs as follows:

create_game() builds the game scenario as a character vector and names it as an object

select_door() randomly samples a numeric vector from 1:3 and returns a single integer as
an object

open_goat_door() compares the contestants pick against the positions of the car and two
goats, opens a goat door not selected by the contestant, and returns
a single integer.

change_door() is then used to return a single integer representing the door of the contestant
if they choose to stay with their original pick and if they change to the other remaining door.
It returns to single integers one for a stay, one for a switch.

determine_winner() runs both final pick options from stay and switch strategies against the position
of the car to determine if staying would lead to a win or if switching would lead
to a win. It names two objects, each a single character vector with "Win" or "Lose"
}
\examples{
play_game()

}
